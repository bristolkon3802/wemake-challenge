---
description: 
globs: 
alwaysApply: false
---
# 프로젝트 컨벤션 가이드

## 기본 원칙
- TypeScript, Node.js, React Router, React, Remix, Shadcn UI, Radix UI, Tailwind, Supabase 기반 프로젝트
- 함수형 프로그래밍과 선언적 패턴 사용
- 코드 중복 대신 모듈화 지향
- 설명적인 변수명 사용 (예: isLoading, hasError)

## 파일 구조
- 컴포넌트 파일: 내보낸 컴포넌트 → 하위 컴포넌트 → 헬퍼 함수 → 정적 콘텐츠 → 타입 순서
- 디렉토리명: 소문자와 대시 사용 (예: `components/auth-wizard`)
- 상수: 각 폴더의 [constants.ts](mdc:constants.ts)
- 유틸리티: [core/utils](mdc:core/utils) 폴더
- 스키마: 각 폴더의 [schema.ts](mdc:schema.ts)
- SQL: [sql/functions](mdc:sql/functions), [sql/triggers](mdc:sql/triggers), [sql/views](mdc:sql/views)

## 코드 스타일
- TypeScript 인터페이스 선호
- 순수 함수는 "function" 키워드 사용
- 간결한 조건문 구문
- 선언적 JSX
- 열거형 대신 맵 사용

## 컴포넌트 규칙
- UI 컴포넌트는 Shadcn UI에서만 임포트
- @remix-run 임포트는 "react-router"에서만 사용
- Router.ComponentProps 사용하여 타입 정의
- Form/fetcher.Form 사용시 타입 정의 필수
- InputPair, SelectPair, RadioGroupPair 컴포넌트 우선 사용

## 라우팅
- 새 페이지: loader, action, meta 함수 필수
- 라우트 타입: `import type { Route } from "./+types/..."`
- useLoaderData/useActionData 대신 Router.ComponentProps 사용

## 데이터 처리
- try-catch 블록 사용 금지
- json 대신 일반 객체 반환
- 상태 코드 필요시 data 객체 사용

## 주석 규칙
- 한글로 작성
- 의도와 의미를 명확히
- 불필요한 주석 제거 (위치 표시, 닫는 괄호, 이력 기록 등)
- 코드로 표현 가능한 내용은 주석 대신 코드로 작성

